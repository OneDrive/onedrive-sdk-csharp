// ------------------------------------------------------------------------------
//  Copyright (c) 2015 Microsoft Corporation
//  
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//  
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//  
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.


namespace Microsoft.OneDrive.Sdk
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading.Tasks;

    /// <summary>
    /// The type ItemRequest.
    /// </summary>
    public partial class ItemRequest : BaseRequest, IItemRequest
    {
        /// <summary>
        /// Constructs a new ItemRequest.
        /// </summary>
        /// <param name="requestUrl">The request URL.</param>
        /// <param name="client">The <see cref="IBaseClient"/> for handling requests.</param>
        /// <param name="options">Query option name value pairs for the request.</param>
        public ItemRequest(
            string requestUrl,
            IBaseClient client,
            IList<Option> options)
            : base(requestUrl, client, options)
        {
        }

        /// <summary>
        /// Creates the specified Item using PUT.
        /// </summary>
        /// <param name="item">The Item to create.</param>
        /// <returns>The created Item.</returns>
        public async Task<Item> CreateAsync(Item item)
        {
            this.ContentType = "application/json";
            this.Method = "PUT";
            var entity = await this.SendAsync<Item>(item);
            this.InitializeCollectionProperties(entity);
            return entity;
        }

        /// <summary>
        /// Deletes the specified Item.
        /// </summary>
        /// <returns>The task to await.</returns>
        public async Task DeleteAsync()
        {
            this.Method = "DELETE";
            await this.SendAsync<Item>(null);
        }

        /// <summary>
        /// Gets the Item.
        /// </summary>
        /// <returns>The Item.</returns>
        public async Task<Item> GetAsync()
        {
            this.Method = "GET";
            var entity = await this.SendAsync<Item>(null);
            this.InitializeCollectionProperties(entity);
            return entity;
        }

        /// <summary>
        /// Updates the specified Item using PATCH.
        /// </summary>
        /// <param name="item">The Item to update.</param>
        /// <returns>The updated Item.</returns>
        public async Task<Item> UpdateAsync(Item item)
        {
            this.ContentType = "application/json";
            this.Method = "PATCH";
            var entity = await this.SendAsync<Item>(item);
            this.InitializeCollectionProperties(entity);
            return entity;
        }

        /// <summary>
        /// Adds the specified expand value to the request.
        /// </summary>
        /// <param name="value">The expand value.</param>
        /// <returns>The request object to send.</returns>
        public IItemRequest Expand(string value)
        {
            this.QueryOptions.Add(new QueryOption("$expand", value));
            return this;
        }

        /// <summary>
        /// Adds the specified select value to the request.
        /// </summary>
        /// <param name="value">The select value.</param>
        /// <returns>The request object to send.</returns>
        public IItemRequest Select(string value)
        {
            this.QueryOptions.Add(new QueryOption("$select", value));
            return this;
        }
        
        /// <summary>
        /// Adds the specified top value to the request.
        /// </summary>
        /// <param name="value">The top value.</param>
        /// <returns>The request object to send.</returns>
        public IItemRequest Top(int value)
        {
            this.QueryOptions.Add(new QueryOption("$top", value.ToString()));
            return this;
        }

        /// <summary>
        /// Initializes any collection properties after deserialization, like next requests for paging.
        /// </summary>
        /// <param name="item">The <see cref="Item"/> with the collection properties to initialize.</param>
        private void InitializeCollectionProperties(Item item)
        {
        
            if (item != null && item.AdditionalData != null)
            {
        
                if (item.Permissions != null && item.Permissions.CurrentPage != null)
                {
                    item.Permissions.AdditionalData = item.AdditionalData;

                    object nextPageLink;
                    item.AdditionalData.TryGetValue("permissions@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        item.Permissions.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
        
                if (item.Versions != null && item.Versions.CurrentPage != null)
                {
                    item.Versions.AdditionalData = item.AdditionalData;

                    object nextPageLink;
                    item.AdditionalData.TryGetValue("versions@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        item.Versions.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
        
                if (item.Children != null && item.Children.CurrentPage != null)
                {
                    item.Children.AdditionalData = item.AdditionalData;

                    object nextPageLink;
                    item.AdditionalData.TryGetValue("children@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        item.Children.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
        
                if (item.Thumbnails != null && item.Thumbnails.CurrentPage != null)
                {
                    item.Thumbnails.AdditionalData = item.AdditionalData;

                    object nextPageLink;
                    item.AdditionalData.TryGetValue("thumbnails@odata.nextLink", out nextPageLink);
                    var nextPageLinkString = nextPageLink as string;

                    if (!string.IsNullOrEmpty(nextPageLinkString))
                    {
                        item.Thumbnails.InitializeNextPageRequest(
                            this.Client,
                            nextPageLinkString);
                    }
                }
        
            }

        
        }
    }
}
